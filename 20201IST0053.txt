
import random
import matplotlib.pyplot as plt
class Channel:
 def _init_(self, channel_id):
 self.channel_id = channel_id
 self.available = True
 self.allocated_service = None
class Service:
 def _init_(self, service_id, required_bandwidth, weight):
 self.service_id = service_id
 self.required_bandwidth = required_bandwidth
 self.weight = weight
 self.bandwidth_usage = 0
class ChannelAllocator:
 def _init_(self, num_channels):
 self.channels = [Channel(i) for i in range(num_channels)]
 def allocate_channel(self, service):
 max_bandwidth = 20
 for channel in self.channels:
 if channel.available:
 if channel.allocated_service is None or
service.required_bandwidth + channel.allocated_service.bandwidth_usage <=
max_bandwidth:
 channel.available = False
 channel.allocated_service = service
 service.bandwidth_usage =
channel.allocated_service.required_bandwidth
 print(f"Allocated Service {service.service_id} to Channel
{channel.channel_id}")
 break
 else:
 print(f"No available channel for Service {service.service_id}")
# Set maximum bandwidth for graphical representation
max_bandwidth = 20
# Define users and their respective bandwidth values
users = ["User1", "User2", "User3", "User4", "User5"]
user_bandwidth = [random.randint(1, max_bandwidth) for _ in range(5)]
# Define apps, their required bandwidth, and weights
apps = ["WhatsApp", "YouTube", "Instagram", "Snapchat", "Facebook"]
app_bandwidth = [random.randint(1, max_bandwidth) for _ in range(5)]
app_weights = [0.2, 0.3, 0.15, 0.1, 0.25]
# Create Service instances with user bandwidth and app weights
services = [Service(user, bandwidth, weight) for user, bandwidth, weight in
zip(users, user_bandwidth, app_weights)]
# Create ChannelAllocator instance with a certain number of channels
channel_allocator = ChannelAllocator(5)
# Allocate channels based on service requirements
for service in services:
 channel_allocator.allocate_channel(service)
# Calculate overall bandwidth usage for each app, considering the weights
app_usage = [app_weight * app_bw for app_weight, app_bw in zip(app_weights,
app_bandwidth)]
# Draw a graph of user bandwidth usage
plt.subplot(1, 2, 1)
plt.bar(users, user_bandwidth)
plt.xlabel("Users")
plt.ylabel("Bandwidth Usage")
plt.title("User Bandwidth Usage")
# Draw a graph of overall app bandwidth usage
plt.subplot(1, 2, 2)
plt.bar(apps, app_usage)
plt.xlabel("Apps")
plt.ylabel("Bandwidth Usage")
plt.title("Overall App Bandwidth Usage")
# Adjust the layout and display the graphs
plt.tight_layout()
plt.show()